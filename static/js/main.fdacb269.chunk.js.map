{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["getPointAttribute","pt","pattern","tmp","renderControlPoints","data","x","i","key","RandomHLine","className","opt","numLines","styleMid","fill","stroke","styleTop","styleBottom","classNameTop","classNameBottom","classNameMid","debug","options","Array","console","r","genHLines","width","height","viewBox","version","baseProfile","xmlns","curve","d","style","RandomBlob","genBlob","size","App","rng","from","start","Math","random","styles","map","Fragment","numControls","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fdacb269.chunk.js","sourcesContent":["import React from 'react'\nimport {genBlob, genHLines} from 'random-shapes'\n\nfunction getPointAttribute(pt, pattern) {\n\tlet tmp = {}\n\ttmp[pattern.replace(\"?\", \"x\")] = pt.x.toFixed(2)\n\ttmp[pattern.replace(\"?\", \"y\")] = pt.y.toFixed(2)\n\treturn tmp\n}\n\nfunction renderControlPoints(data) {\n\treturn(\n\t\t<React.Fragment>\n\t\t\t{data.map((x, i) => {\n\t\t\t\treturn(\n\t\t\t\t\t<React.Fragment key={\"group \" + i}>\n\t\t\t\t\t\t<line {...getPointAttribute(x.ctrl, \"?1\")} {...getPointAttribute(x.ctrl_alt, \"?2\")} key={\"line \" + i} stroke=\"blue\" />\n\t\t\t\t\t\t<circle {...getPointAttribute(x.point, \"c?\")} r={4} key={\"center \" + i} />\n\t\t\t\t\t\t<circle {...getPointAttribute(x.ctrl, \"c?\")} r={2} key={\"control \" + i} />\n\t\t\t\t\t\t<circle {...getPointAttribute(x.ctrl_alt, \"c?\")} r={2} key={\"control_alt \" + i} />\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t)\n\t\t\t})}\n\t\t</React.Fragment>\n\t)\n}\n\nexport function RandomHLine({ width, height, options, override, className }) {\n\n\t// Override is an array of objects.\n\t// If the entry at position i is null, undefined, or \"auto\", then default is applied.\n\t// Each non-auto entry is an object with 3 possible keys: x, y, and angle.\n\t// Each key has a value that's an array (or null). The first element of the array\n\t// is the \"mode\" of overriding. There are 3 possible (non-null) modes:\n\t// \t- null, undefined, or \"auto\"\n\t// \t- [\"p\", value]: specify the exact value\n\t// \t- [\"w\", value]: specify the size of the window\n\t// \t- [\"r\", l_bound, u_bound]: specify the minimum and maximum values\n\t\n\tconst opt = {\n\t\tnumLines: 1,\n\t\tstyleMid: {fill: \"transparent\", stroke: \"black\"},\n\t\tstyleTop: \"none\",\n\t\tstyleBottom: \"none\",\n\t\tclassNameTop: \"\",\n\t\tclassNameBottom: \"\",\n\t\tclassNameMid: \"\",\n\t\tdebug: false,\n\t\t...options\n\t}\n\n\tif (opt.styleTop !== \"none\" && !Array.isArray(opt.styleTop)) opt.styleTop = [opt.styleTop]\n\tif (opt.styleBottom !== \"none\" && !Array.isArray(opt.styleBottom)) opt.styleBottom = [opt.styleBottom]\n\tif (opt.styleMid !== \"none\" && !Array.isArray(opt.styleMid)) opt.styleMid = [opt.styleMid]\n\tif (opt.debug){\n\t\tconsole.log(opt.styleMid[0 % opt.styleMid.length])\n\t}\n\n\tconst r = genHLines(width, height, opt, override)\n\treturn(\n\t\t<svg viewBox={`0 0 ${width} ${height}`} width={width} height={height}\n\t\t\t\tversion=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tclassName={className}>\n\t\t\t{\n\t\t\t\tr.map(({data, curve}, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<React.Fragment key={\"line\" + i}>\n\t\t\t\t\t\t\t{(opt.styleTop !== \"none\" || opt.classNameTop) &&\n\t\t\t\t\t\t\t\t<path d={curve + \" V 0 H 0 Z\"}\n\t\t\t\t\t\t\t\t\tstyle={opt.styleTop !== \"none\" ? opt.styleTop[i % opt.styleTop.length] : {}} className={opt.classNameTop} />\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{(opt.styleBottom !== \"none\" || opt.classNameBottom) &&\n\t\t\t\t\t\t\t\t<path d={curve + ` V ${height} H 0 Z`}\n\t\t\t\t\t\t\t\t\tstyle={opt.styleBottom !== \"none\" ? opt.styleBottom[i % opt.styleBottom.length] : {}} className={opt.classNameBottom} />\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{(opt.styleMid !== \"none\" || opt.classNameMid) &&\n\t\t\t\t\t\t\t\t<path d={curve}\n\t\t\t\t\t\t\t\t\tstyle={opt.styleMid !== \"none\" ? opt.styleMid[i % opt.styleMid.length] : {}} className={opt.classNameMid} />\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{opt.debug && renderControlPoints(data)}\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\n\t\t</svg>\n\t)\n\n}\n\nexport function RandomBlob({ size, options, className }) {\n\t\n\tconst opt = {\n\t\tstyle: {fill: \"red\"},\n\t\tclassName: \"\",\n\t\tdebug: false,\n\t\t...options\n\t}\n\n\tconst {path, data} = genBlob(size, opt)\n\n\treturn(  \n\t\t<svg viewBox={`0 0 ${size} ${size}`} width={size} height={size}\n\t\t\t\tversion=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tclassName={className}>\n\t\t\t<path d={path} style={opt.style} className={opt.className} />\n\t\t\t{opt.debug && renderControlPoints(data)}\n\t\t</svg>\n\t)\n\n}\n","import React from 'react'\n\nimport { RandomBlob, RandomHLine } from 'react-random-shapes'\n\nconst App = () => {\n\n\tconst numLines = 12\n\tconst rng = Array.from(new Array(numLines), (x, i) => i)\n\tconst start = Math.random() * 360\n\tconst styles = rng.map(x => {\n\t\treturn {fill: \"transparent\", stroke: `hsl(${start + x/numLines*360}, 100%, 50%)`}\n\t})\n\n  return(\n  \t<React.Fragment>\n  \t\t<div><RandomHLine width={600} height={300} options={{classNameTop: \"abc\"}} /></div>\n  \t\t<div><RandomHLine width={600} height={300} options={{debug: true}} /></div>\n  \t\t<div><RandomHLine width={600} height={300} options={{numLines: numLines, numControls: 4, debug: false, styleMid: styles}} /></div>\n  \t\t<div><RandomBlob size={500} className=\"svg-blob\" options={{style: {fill: \"blue\"}}}/></div>\n\t\t</React.Fragment>\n\t)\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}