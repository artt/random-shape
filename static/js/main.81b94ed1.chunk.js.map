{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["getPointAttribute","pt","pattern","tmp","renderControlPoints","data","key","i","x","stroke","r","RandomHLine","width","height","options","override","className","opt","numLines","styleMid","fill","styleTop","styleBottom","classNameTop","classNameBottom","classNameMid","seed","debug","Array","console","genHLines","viewBox","version","baseProfile","xmlns","curve","d","style","RandomBlob","size","numBlobs","blobs","genHBlobs","rendered","App","rng","from","start","Math","random","styles","map","Fragment","numControls","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81b94ed1.chunk.js","sourcesContent":["import React from 'react'\nimport {genBlob, genHBlobs, genHLines} from 'random-shapes'\n\nfunction getPointAttribute(pt, pattern) {\n\tlet tmp = {}\n\ttmp[pattern.replace(\"?\", \"x\")] = pt.x.toFixed(2)\n\ttmp[pattern.replace(\"?\", \"y\")] = pt.y.toFixed(2)\n\treturn tmp\n}\n\nfunction renderControlPoints(data) {\n\treturn(\n\t\t<React.Fragment>\n\t\t\t{data.map((x, i) => {\n\t\t\t\treturn(\n\t\t\t\t\t<React.Fragment key={\"group \" + i}>\n\t\t\t\t\t\t<line {...getPointAttribute(x.ctrl, \"?1\")} {...getPointAttribute(x.ctrl_alt, \"?2\")} key={\"line \" + i} stroke=\"blue\" />\n\t\t\t\t\t\t<circle {...getPointAttribute(x.point, \"c?\")} r={4} key={\"center \" + i} />\n\t\t\t\t\t\t<circle {...getPointAttribute(x.ctrl, \"c?\")} r={2} key={\"control \" + i} />\n\t\t\t\t\t\t<circle {...getPointAttribute(x.ctrl_alt, \"c?\")} r={2} key={\"control_alt \" + i} />\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t)\n\t\t\t})}\n\t\t</React.Fragment>\n\t)\n}\n\nexport function RandomHLine({ width, height, options, override, className }) {\n\n\t// Override is an array of objects.\n\t// If the entry at position i is null, undefined, or \"auto\", then default is applied.\n\t// Each non-auto entry is an object with 3 possible keys: x, y, and angle.\n\t// Each key has a value that's an array (or null). The first element of the array\n\t// is the \"mode\" of overriding. There are 3 possible (non-null) modes:\n\t// \t- null, undefined, or \"auto\"\n\t// \t- [\"p\", value]: specify the exact value\n\t// \t- [\"w\", value]: specify the size of the window\n\t// \t- [\"r\", l_bound, u_bound]: specify the minimum and maximum values\n\t\n\tconst opt = {\n\t\tnumLines: 1,\n\t\tstyleMid: {fill: \"transparent\", stroke: \"black\"},\n\t\tstyleTop: \"none\",\n\t\tstyleBottom: \"none\",\n\t\tclassNameTop: \"\",\n\t\tclassNameBottom: \"\",\n\t\tclassNameMid: \"\",\n\t\tseed: '',\n\t\tdebug: false,\n\t\t...options\n\t}\n\n\tif (opt.styleTop !== \"none\" && !Array.isArray(opt.styleTop)) opt.styleTop = [opt.styleTop]\n\tif (opt.styleBottom !== \"none\" && !Array.isArray(opt.styleBottom)) opt.styleBottom = [opt.styleBottom]\n\tif (opt.styleMid !== \"none\" && !Array.isArray(opt.styleMid)) opt.styleMid = [opt.styleMid]\n\tif (opt.debug){\n\t\tconsole.log(opt.styleMid[0 % opt.styleMid.length])\n\t}\n\n\tconst r = genHLines(width, height, opt, override)\n\treturn(\n\t\t<svg viewBox={`0 0 ${width} ${height}`} width={width} height={height}\n\t\t\t\tversion=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tclassName={className}>\n\t\t\t{\n\t\t\t\tr.map(({data, curve}, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<React.Fragment key={\"line\" + i}>\n\t\t\t\t\t\t\t{(opt.styleTop !== \"none\" || opt.classNameTop) &&\n\t\t\t\t\t\t\t\t<path d={curve + \" V 0 H 0 Z\"}\n\t\t\t\t\t\t\t\t\tstyle={opt.styleTop !== \"none\" ? opt.styleTop[i % opt.styleTop.length] : {}} className={opt.classNameTop} />\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{(opt.styleBottom !== \"none\" || opt.classNameBottom) &&\n\t\t\t\t\t\t\t\t<path d={curve + ` V ${height} H 0 Z`}\n\t\t\t\t\t\t\t\t\tstyle={opt.styleBottom !== \"none\" ? opt.styleBottom[i % opt.styleBottom.length] : {}} className={opt.classNameBottom} />\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{(opt.styleMid !== \"none\" || opt.classNameMid) &&\n\t\t\t\t\t\t\t\t<path d={curve}\n\t\t\t\t\t\t\t\t\tstyle={opt.styleMid !== \"none\" ? opt.styleMid[i % opt.styleMid.length] : {}} className={opt.classNameMid} />\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{opt.debug && renderControlPoints(data)}\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\n\t\t</svg>\n\t)\n\n}\n\nexport function RandomBlob({ size, options, className }) {\n\t\n\tconst opt = {\n\t\tnumBlobs: 1,\n\t\tstyle: {fill: \"red\"},\n\t\tclassName: \"\",\n\t\tseed: '',\n\t\tdebug: false,\n\t\t...options\n\t}\n\n\tconst blobs = genHBlobs(size, opt);\n\n\tconst rendered = []\n\tfor (let i = 0; i < blobs.length; i += 1) {\n\t\trendered.push(\n\t\t\t<path d={blobs[i].path} style={opt.style} className={opt.className} />\n\t\t)\n\t\tif (opt.debug) {\n\t\t\trendered.push(renderControlPoints(blobs[i].data))\n\t\t}\n  }\n\n\treturn(  \n\t\t<svg viewBox={`0 0 ${size} ${size}`} width={size} height={size}\n\t\t\t\tversion=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tclassName={className}>\n\t\t  {rendered}\n\t\t</svg>\n\t)\n\n}\n","import React from 'react'\n\nimport { RandomBlob, RandomHLine } from 'react-random-shapes'\n\nconst App = () => {\n\n\tconst numLines = 12\n\tconst rng = Array.from(new Array(numLines), (x, i) => i)\n\tconst start = Math.random() * 360\n\tconst styles = rng.map(x => {\n\t\treturn {fill: \"transparent\", stroke: `hsl(${start + x/numLines*360}, 100%, 50%)`}\n\t})\n\n  return(\n  \t<React.Fragment>\n  \t\t<div>\n\t\t\t\tExample with class name and seed\n\t\t\t\t<div>\n\t  \t\t\t<RandomHLine width={600} height={300} options={{classNameTop: \"abc\", seed: \"hello!\"}} />\n  \t\t\t</div>\n  \t\t</div>\n  \t\t<div>\n  \t\t\tExample with debug turned on, showing handles\n  \t\t\t<div>\n\t  \t\t\t<RandomHLine width={600} height={300} options={{debug: true}} />\n  \t\t\t</div>\n  \t\t</div>\n  \t\t<div>\n  \t\t\tExample with multiple lines\n  \t\t\t<div>\n  \t\t\t\t<RandomHLine width={600} height={300} options={{numLines: numLines, numControls: 4, debug: false, styleMid: styles}} />\n  \t\t\t</div>\n  \t\t</div>\n  \t\t<div>\n  \t\t\tExample with blob\n  \t\t\t<div>\n  \t\t\t\t<RandomBlob size={500} className=\"svg-blob\" options={{style: {fill: \"blue\"}}} />\n  \t\t\t</div>\n  \t\t</div>\n      <div>\n        Example with three blobs\n        <div>\n          <RandomBlob size={500} className=\"svg-blob\" options={{numBlobs: 3, style: {stroke: \"green\", fill: \"none\"}}} />\n        </div>\n      </div>\n\t\t</React.Fragment>\n\t)\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}